K8 objects:
Pods = runs one or more closely related containers

inside Pods can be docker - containers.

Master node , worker node - Pods inside pod

Nodes = individual machines or VMs that run containers.container.
Master = machine or VM manages nodes
Kubernetes = dont build our images , gets from somewhere else
To deploy, we update the desires state.

Config files = has Kind
kind: Pod




if we run dokcer ps and kill a container, then minikube automativally creates a new container from docker hub.

deployment file (yml) files work with master.  if master told 4 running need, it makes sure 4 always is running.


Objects = Pod - Service - Deployments Stateful - Replica Controller
Objects serves different purposes - running a container - monitoring a container - setting up - networking


Service =  Ingress, NodePort, clusterIP, LoadBalancer

nodePort= exposes a container to the outside world (only good for dev purposes)

selector:
    component : web

minikube start

kubectl apply -f client-pod.yaml
kubectl apply -f client-node-port.yaml

kubectl get pods

kubectl delete -f client-pod.yaml
kubectl delete -f client-node-port.yaml

Pods = runs a single set of containers,  good for one-off dev rarely used in production

Deployment = runs a set of identical pods , monitor the state of each pod - good for dev - production.


In Kubernetes, a Service is an abstraction which defines a logical set of Pods and a policy by which to access them
 (sometimes this pattern is called a micro-service).
  The set of Pods targeted by a Service is usually determined by a selector.
kubectl get services


minikube ip = find ip of k8 vm created by minikube
http://192.168.64.2:31515/

----update yml
--then get detailed info
kubectl describe pod client-pod

We are not allowed to update port in config.yaml file in pod. instead we use deployment

-update pods only allow for exampls image not port.
New type of Object:
Deployment :  kuberbets object maintains a set of identical pods.

Pods: runs a single set of containers, good for one-off dev . not for prod

Deployment= runs a set of identical pods - monitors the state of each pod, good for dev, good for prod
replicas= number of pods using temlate written

kind: Deployment

kubectl apply -f client-deployment.yaml
kubectl get deployments

kubectl get pods -o wide
every pod has a single ip


delete = kubectl delete -f client-pod.yaml



Service = connects the port to Pods ipaddress so we dont need to worry about the changing of pods ipaddess everytime it changes.




update image for kub deplot,ent
docker build -t  arsh7023/mlti-client:v5 .
== docker push to docker hub
docker push arsh7023/mlti-client

--impetartive
kubectl set image deployment/client-deployment client=arsh7023/multi-client:v5   ==> client-deployment is the container name of the container we are updating, get from config file.
kubectl get pods

If you want to reconfigure your docker cli to comminuicate to docker server inside a virtaul machine:
eval ($minikube docker-env) == config the vm to use your docker server
This only configure your current terminal window;

munikube docker-env:  shows docker settings inside minikube cluster

kubectl delete deployment client-deployment

kubectl apply -f foldername = apply all files inside folder
kubectl apply -f k8s == look at complex-stephen project
---
kubectl get pods = get id
kubectl logs id => this is same: 1)docker ps  2) get id  3) docker id logs

docker commands mostly avaiable via kubectl


volume =  deletes when pods delets
persistent volume

PersistenceVolumeClaim  = PVC

accessMode s21.png

kubectl get storageclass
kubectl describe storageclass

kubectl get pv : persistent volumes
kubectl get pvc : persistent volumes claims

Secrets: secure information like passwords
kubectl create secret generic pgpassword --from-literal PGPASSWORD=12345asdf

kubectl get secrets

loadbalancer : legacy
ingress = new
igress-nginx community version s29.png
https://github.com/kubernetes/ingress-nginx

controller:
in k8 a controller is any type of  object that constantly works to meet a desire state of a reality

https://www.joyfulbikeshedding.com/blog/2018-03-26-studying-the-kubernetes-ingress-system.html
https://kubernetes.github.io/ingress-nginx/deploy/#prerequisite-generic-deployment-command

 minikube dashboard

 kubectl get namespaces