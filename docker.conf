docker technology == namespacing and control group
namespacing = processor, hard drive - users - network - hostnames - inter process communication : isolating resource per process(or group of processes)
control groups(vgroups) = Memory - CPU Usage - IO - Network bandwidth : limit amount of resources used per process

--creates and run and stdout output
docker run = docker create , docker run
docker run hello-world

docker ps --all : list all containers including running and exited one.
docker ps : list only running containers

docker run -it --name ali-centos centos /bin/bash

For example, to run a container from the centos image and map a volume called test-ali-volume to the containers /data directory, the command is:
docker volume create --name test-ali-volume
docker run -it --name ali-centos2 -v test-ali-volume:/data centos /bin/bash
then we can create a tt.txt indside data directory and  can see the same file in volume:

--see volume in mac
docker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh
/var/lib/docker/volumes/test-ali-volume/_data/tt.txt

docker volume inspect test-ali-volume


docker stop container-id
dcoker rm container-id
docker rm --force container-id

docker images ==> list all images

docker cp ckan:/etc/ckan/production.ini .
docker cp production.ini ckan:/etc/ckan/

docker exec -it ckan /bin/bash -c "export TERM=xterm; exec bash"

=========
docker logs container-id
docker logs gets the logs even for not running container

====
docker container ls --all ==same docker ps --all
===========
pass environment variable to a container:

docker run -e ENV_VAR1=myvalue ubuntu env | grep ENV_VAR

pass parametere to running container from ubuntu image and then running env command;


 docker logs a89eaf330334 : logs works even the container exited and not running.

 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 HOSTNAME=a89eaf330334
 ENV_VAR1=myvalue
 HOME=/root



=========
docker run image == docker-compose up
docker build .      === look below line after Two commands are become one:====
docker run my image  ==== docker-compose up --build

Whenever we build it creates a new containers ; CAREFULL

stop containers: docker-compose down

docker-compose ps
=======
whenever we run docker run image, it creates a container

cd simpleweb:
docker build -t arsh7023/simpleweb . === build image using Dockerfile which exists in the simpleweb directory
docker run uses an image and creates a container from that image:
whenever we execute docker run it creates a new container
1)docker run -p 8080:8080 arsh7023/simpleweb   => localhost:8080
docker ps:
0eee0ddc4e34        arsh7023/simpleweb   "docker-entrypoint.s…"   32 seconds ago      Up 31 seconds       0.0.0.0:8080->8080/tcp   intelligent_neumann
2)docker run -p 7000:8080 arsh7023/simpleweb  => localhost:7000 ==> 7000 local port
docker ps:
e8c8203d3705        arsh7023/simpleweb   "docker-entrypoint.s…"   About a minute ago   Up About a minute   0.0.0.0:7000->8080/tcp   sharp_elbakyan
0eee0ddc4e34        arsh7023/simpleweb   "docker-entrypoint.s…"   2 minutes ago        Up 2 minutes        0.0.0.0:8080->8080/tcp   intelligent_neumann

docker stop 0eee0ddc4e34
docker start 0eee0ddc4e34

docker start -a container-id : -a means wait for output & stdout
=====

IMPORTANT:

We can make images by name:
docker build -t multiclient .

we can make containers by name:
docker run -it --name alidocker -p 3000:3000 multiclient

Then we can start , stop container:
docker stop alidocker
docker start alidocker

=========
volume:
docker run -p 3000:3000 -v /app/node_modules -v src:/app dockerimage

we can have multiple volumes
in above the src local folder maps to app folder inside running container.
in above since /app/node_modules doesnt have colon: it says that dont map /app/node_modules
but map the src folder to app folder except node_modules folder.

======

docker build -f Dockerfile.dev -t alidockerimage .
docker run -it -p 3000:3000 -v /app/node_modules -v $(pwd):/app alidockerimage
====

we can enter inside a running container using exec -it:
docker exec -it container-id sh

-it : -i=> stdin -t=>stdout
=====

docker run centus :
creates & runs a container from centus image
=======
push to docker-hub

docker push arsh7023/multiclient

=========
simpleweb/Dockerfile:

FROM node:alpine

WORKDIR /usr/app

COPY ./package.json ./

RUN npm install
COPY ./ ./

# Default command
CMD ["npm", "start"]
=========
cd frontend
Multiple Step Dockerfile:

FROM node:alpine
WORKDIR '/app'
COPY package.json .
RUN npm install
COPY . .
RUN npm run build

FROM nginx
COPY --from=0 /app/build /usr/share/nginx/html

--then build
docker build -t frontend .
--then run
docker run -it --name alifrontend -p 3000:80 frontend
--testing stop & start
docker stop alifrontend
docker start alifrontend

=========
cd visits:
docker-compose builds Dockerfiles . Inside a docker-compose.yml can be multiple service which each points to
an image either through a Dockerfile or just an image name from docker hub. each service becomes a container.from
inside a docker-compose.yml for referring to a dockerfile we use "build: ."
"build: ." means there is a Dockerfile in the same folder as docker-compose.yml
if the folder name is different we can refer it using "context: ./server" in this example says server folder.

If the Dockerfile name is different it should be like:

build:
   Dockerfile: Dockerfile.dev
   context: ./server

visists/docker-compose.yml:
   version: '3'
   services:
     redis-server:
       image: 'redis:latest'
     node-app:
       restart: on-failure
       build: .
       ports:
         - '8081:8081'

The "redis-server" becomes a container and inside the program can be reffered:
index.js: (look at host)

const redis = require('redis');
const client = redis.createClient({
  host: 'redis-server',
  port: 6379,
});


docker-compose up -d => -d meands backgroud.
=========
cd frontend:

docker-compose up
everything as "service" becomes a container (it means name container)
as an example below the image tags as  frontend_web and frontend_tests
and two containers name are frontend_web_1 and frontend_tests_1

it also setups the networking and you can run http://localhost:3000

Also since volumes has used if you change the "hello react2 " in src/App.js, it immediately reflects in browser.


docker-compose.yml:
version: '3'
services:
  web:
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - '3000:3000'
    volumes:
      - /app/node_modules
      - .:/app
  tests:
    stdin_open: true
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - .:/app
    command: ['npm', 'run', 'test']

======

docker-compose up --build  ==> builds containers

just running:
docker-compose up
docker-compose up -d => -d means background
status:
docker-compose ps

stop:
docker-compose down ==>  CAREFULL ; stops and removes containeres

Safe stop:
docker-compose stop

start:
docker-compose up
or
docker-compose start
=========

Environment in docker-compose:

1- variableName = value ==> sets a variable in the container at "run time" with value.
2- variable (only) ===> sets a variable in the container at "run time" value i staken from "your computer"

cd complex:
docker-compose.yml:

build:
      dockerfile: Dockerfile.dev
      context: ./server
    volumes:
      - /app/node_modules
      - ./server:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432


In ablove the REDIS_HOST=redis , redis is an service which gets the image from redis in docker-hub:
  redis:
    image: 'redis:latest'

services:
  postgres:
    image: 'postgres:latest'
    environment:
      - POSTGRES_PASSWORD=postgres_password
  redis:
    image: 'redis:latest'

=========

cd  complex:

Dock-compose depends on :

  nginx:
    depends_on:
      - api
      - client
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '3050:80'

=========
Dockercompose restart policy:

no=> never attempt restart if it stops or crashes
always=> restart for any reason
on-failure=> only restart if stops with an error code
unless-stopped=> always restart unless we (developers) forcibly stop it.

======

docker system prune -a
docker rm $(docker ps -a -q)

# Remove all docker images
docker rmi $(docker images -q)

# Prune the old images
docker system prune -a

docker volume prune
# List of the running volumes
docker volume ls

# Remove the GeoServer catalog by its name
docker volume rm -f geonode-gsdatadir

# Remove all dangling docker volumes
docker volume rm $(docker volume ls -qf dangling=true)
docker volume rm $(docker volume ls)
docker rmi  $(docker images ls -qf dangling=true)

# update all images, should be run regularly to fetch published updates
for i in $(docker images| awk 'NR>1{print $1":"$2}'| grep -v '<none>'); do docker pull "$i" ;done

=======
docker-compose volumes local:

volumes:
  dbdata:
    name: 'citydata-dbdata'
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/Users/alireza/mnt/data/postgresql'

========

docker file entry point:
The command for ENTRYPOINT cannot be overwritten from the command line as you start the container.

Dockerfile:

FROM ubuntu:latest
RUN DEBIAN_FRONTEND=noninteractive apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get -yq install net-tools nginx
EXPOSE 80
ENTRYPOINT ["/usr/sbin/nginx", "-g", "daemon off;"]


 docker build  -f Dockerfile -t aliubuntuimage  .

 docker run -it -p 4000:80 --name aliubuntu-container aliubuntuimage

stop / start container
 docker stop aliubuntu-container
 docker start aliubuntu-container
========